rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    // --- USERS COLLECTION ---
    match /users/{uid} {
      allow read: if request.auth != null; // any signed-in user can see others
      allow create, delete: if request.auth != null && request.auth.uid == uid; // only self
      
      // Allow updates with specific rules for friends, pushToken, and timezone
      allow update: if request.auth != null && (
        // User can update their own document
        request.auth.uid == uid ||
        // OR allow updating ONLY friends field when adding/removing self
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends']) &&
         request.auth.uid in request.resource.data.get('friends', []))
      );
      
      // Allow users to update their own timezone, locale, bio, displayName, photoURL, workingHours
      allow update: if request.auth.uid == uid &&
        request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['timezone', 'locale', 'displayName', 'bio', 'photoURL', 'workingHours']);
      
      // Allow Cloud Functions to update pushToken (unauthenticated context)
      // This enables token cleanup and updates from server-side
      allow update: if request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['pushToken', 'pushTokenUpdatedAt']);
    }

    // --- CONVERSATIONS COLLECTION ---
    match /conversations/{cid} {
      // Allow authenticated users to read conversations (even if document doesn't exist)
      // This allows checking if conversation exists before creating
      allow get: if request.auth != null;
      
      // List query: only return conversations user is part of
      allow list: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      // Allow authenticated users to create conversations if they're in participants
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
      
      // Allow participants to update conversation (lastMessage, etc.)
      allow update: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      // Allow participants to delete
      allow delete: if request.auth != null && 
        request.auth.uid in resource.data.participants;

      // --- NESTED MESSAGES ---
      match /messages/{mid} {
        // Allow participants to read/write messages
        allow read, write: if request.auth != null && 
          request.auth.uid in get(/databases/$(db)/documents/conversations/$(cid)).data.participants;
      }
    }

    // --- FAILED_OPERATIONS COLLECTION (PR3) ---
    // Only Cloud Functions can write (no auth context)
    // Admins can read for debugging
    match /failed_operations/{opId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow write: if false; // Only Cloud Functions via admin SDK
    }

    // --- VECTOR_MESSAGES COLLECTION (PR2) ---
    // Only Cloud Functions can write (embeddings)
    // No direct user access needed
    match /vector_messages/{msgId} {
      allow read, write: if false; // Only Cloud Functions via admin SDK
    }

    // --- EVENTS COLLECTION (PR5) ---
    // Calendar events for tutoring sessions
    match /events/{eventId} {
      // Rule 1: Participants can read their events
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      // Rule 2: Authenticated users can create events if they're in participants
      allow create: if request.auth != null &&
        request.auth.uid in request.resource.data.participants &&
        request.auth.uid == request.resource.data.createdBy;
      
      // Rule 3: Only creator can update event
      allow update: if request.auth != null &&
        request.auth.uid == resource.data.createdBy;
      
      // Rule 4: Only creator can delete event
      allow delete: if request.auth != null &&
        request.auth.uid == resource.data.createdBy;
    }

    // --- DEADLINES COLLECTION (PR11) ---
    // Tasks, homework, and deadlines
    match /deadlines/{deadlineId} {
      // Rule 1: Assignee can read their deadlines
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.assignee;
      
      // Rule 2: Creator (tutor) can read deadlines they created
      allow read: if request.auth != null &&
        request.auth.uid == resource.data.createdBy;
      
      // Rule 3: Authenticated users can create deadlines
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.createdBy;
      
      // Rule 4: Assignee and creator can update deadline (for toggling complete)
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.assignee ||
        request.auth.uid == resource.data.createdBy
      );
      
      // Rule 5: Assignee and creator can delete deadline
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.assignee ||
        request.auth.uid == resource.data.createdBy
      );
    }

    // --- URGENT_NOTIFICATIONS_LOG COLLECTION (PR9) ---
    // Analytics for urgency detection
    match /urgent_notifications_log/{logId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow write: if false; // Only Cloud Functions via admin SDK
    }

    // --- NOTIFICATION_OUTBOX COLLECTION (PR12) ---
    // Outbox pattern for reliable reminder delivery
    match /notification_outbox/{docId} {
      // Users can read their own reminders (for debugging)
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.targetUserId;
      
      // Only Cloud Functions can write (scheduler + worker)
      allow write: if false; // Only Cloud Functions via admin SDK
    }

    // --- NUDGE_LOGS COLLECTION (PR13) ---
    // Analytics for autonomous monitoring nudges
    match /nudge_logs/{logId} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow write: if false; // Only Cloud Functions via admin SDK
    }
  }
}
